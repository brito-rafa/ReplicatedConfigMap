/*
Copyright 2022 Rafael Brito.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	apimachineryvalidation "k8s.io/apimachinery/pkg/api/validation"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/util/validation"
	"k8s.io/apimachinery/pkg/util/validation/field"

	//"k8s.io/kubernetes/pkg/apis/core"
	//"k8s.io/kubernetes/pkg/apis/core/validation"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
)

// log is for logging in this package.
var replicatedconfigmaplog = logf.Log.WithName("replicatedconfigmap-resource")

var ValidateConfigMapName = apimachineryvalidation.NameIsDNSSubdomain

func (r *ReplicatedConfigMap) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

// TODO(user): EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!

//+kubebuilder:webhook:path=/mutate-replications-example-io-v1alpha1-replicatedconfigmap,mutating=true,failurePolicy=fail,sideEffects=None,groups=replications.example.io,resources=replicatedconfigmaps,verbs=create;update,versions=v1alpha1,name=mreplicatedconfigmap.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &ReplicatedConfigMap{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *ReplicatedConfigMap) Default() {
	replicatedconfigmaplog.Info("default", "name", r.Name)

	// TODO(user): fill in your defaulting logic.
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-replications-example-io-v1alpha1-replicatedconfigmap,mutating=false,failurePolicy=fail,sideEffects=None,groups=replications.example.io,resources=replicatedconfigmaps,verbs=create;update,versions=v1alpha1,name=vreplicatedconfigmap.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &ReplicatedConfigMap{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *ReplicatedConfigMap) ValidateCreate() error {
	replicatedconfigmaplog.Info("validate create", "name", r.Name)

	allErrs := field.ErrorList{}

	nameFn := apimachineryvalidation.ValidateNameFunc(ValidateConfigMapName)
	if nameFn != nil {
		err := field.Invalid(field.NewPath("metadata").Child("name"), r.Name, " does not follow DNSSubdomain.")
		allErrs = append(allErrs, err)
	}

	totalSize := 0

	for key, value := range r.Data {
		for _, msg := range validation.IsConfigMapKey(key) {
			allErrs = append(allErrs, field.Invalid(field.NewPath("data").Key(key), key, msg))
		}
		// check if we have a duplicate key in the other bag
		if _, isValue := r.BinaryData[key]; isValue {
			msg := "duplicate of key present in binaryData"
			allErrs = append(allErrs, field.Invalid(field.NewPath("data").Key(key), key, msg))
		}
		totalSize += len(value)
	}
	for key, value := range r.BinaryData {
		for _, msg := range validation.IsConfigMapKey(key) {
			allErrs = append(allErrs, field.Invalid(field.NewPath("binaryData").Key(key), key, msg))
		}
		totalSize += len(value)
	}
	/*
		if totalSize > core.MaxSecretSize {
			// pass back "" to indicate that the error refers to the whole object.
			allErrs = append(allErrs, field.TooLong(field.NewPath(""), r, core.MaxSecretSize))
		}
	*/

	return apierrors.NewInvalid(
		schema.GroupKind{Group: "replications.example.io", Kind: "replicatedConfigMap"},
		r.Name, allErrs)

}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *ReplicatedConfigMap) ValidateUpdate(old runtime.Object) error {
	replicatedconfigmaplog.Info("validate update", "name", r.Name)

	// TODO(user): fill in your validation logic upon object update.
	return nil
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *ReplicatedConfigMap) ValidateDelete() error {
	replicatedconfigmaplog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil
}
